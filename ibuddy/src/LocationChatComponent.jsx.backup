// React 위치 기반 채팅 컴포넌트
import React, { useState, useEffect, useRef } from 'react';
import LocationService from './location-service.js';
import { userUtils } from './user-service.js';

const LocationChatComponent = ({ user, onLocationError }) => {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [nearbyUsers, setNearbyUsers] = useState([]);
  const [error, setError] = useState(null);
  
  const chatSocketRef = useRef(null);
  const messagesEndRef = useRef(null);

  // 컴포넌트 마운트 시 초기화
  useEffect(() => {
    initializeChat();
    return () => cleanup();
  }, [user]);

  // 메시지가 업데이트될 때 스크롤을 하단으로
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // 채팅 초기화
  const initializeChat = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      // ChatSocket 인스턴스 생성
      chatSocketRef.current = new ChatSocket();
      
      // 이벤트 핸들러 등록
      setupEventHandlers();
      
      // 채팅 초기화 (위치 권한 요청 포함)
      const result = await chatSocketRef.current.initialize(user);
      
      if (result.success) {
        setIsConnected(true);
        setLocationStatus('granted');
        setChatStatus(result.chatRoom);
        
        // 실시간 위치 추적 시작
        chatSocketRef.current.startLocationTracking();
        
        // 시스템 메시지 추가
        addSystemMessage(`반경 1km 채팅방에 입장했습니다! 🌍`);
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('채팅 초기화 실패:', error);
      setError(error.message);
      setLocationStatus('denied');
      
      if (onLocationError) {
        onLocationError(error);
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Socket 이벤트 핸들러 설정
  const setupEventHandlers = () => {
    const socket = chatSocketRef.current;
    
    // 새 메시지 수신
    socket.on('message_received', (message) => {
      setMessages(prev => [...prev, {
        ...message,
        id: message.id || Date.now(),
        isOwn: message.sender.id === user.id
      }]);
    });

    // 사용자 입장
    socket.on('user_joined', (joinedUser) => {
      addSystemMessage(`${joinedUser.nickname}님이 입장했습니다 👋`);
      updateUserList();
    });

    // 사용자 퇴장
    socket.on('user_left', (leftUser) => {
      addSystemMessage(`${leftUser.nickname}님이 퇴장했습니다 👋`);
      updateUserList();
    });

    // 추천 받음
    socket.on('like_received', (data) => {
      addSystemMessage(`${data.fromUser.nickname}님이 당신을 추천했습니다! ⭐ (총 ${data.newLikeCount}개)`, 'like');
    });

    // 근처 사용자 업데이트
    socket.on('nearby_users_updated', (users) => {
      setNearbyUsers(users.filter(u => u.id !== user.id)); // 자신 제외
    });

    // 시스템 알림
    socket.on('system_notification', (notification) => {
      if (notification.type === 'banned') {
        setError(notification.message);
        setIsConnected(false);
      } else {
        addSystemMessage(notification.message, notification.type);
      }
    });

    // 연결 해제
    socket.on('disconnected', (data) => {
      setIsConnected(false);
      addSystemMessage('연결이 해제되었습니다. 재연결을 시도합니다...', 'error');
      
      // 재연결 시도 (3초 후)
      setTimeout(() => {
        initializeChat();
      }, 3000);
    });

    // 에러 처리
    socket.on('error', (error) => {
      console.error('Socket 에러:', error);
      addSystemMessage(error.message || '오류가 발생했습니다.', 'error');
    });
  };

  // 시스템 메시지 추가
  const addSystemMessage = (content, type = 'system') => {
    const systemMessage = {
      id: `system_${Date.now()}`,
      content,
      type: 'system',
      subType: type,
      timestamp: Date.now(),
      sender: { nickname: 'System' }
    };
    
    setMessages(prev => [...prev, systemMessage]);
  };

  // 메시지 전송
  const handleSendMessage = (e) => {
    e.preventDefault();
    
    if (!inputMessage.trim() || !isConnected) return;
    
    const result = chatSocketRef.current.sendMessage(inputMessage);
    
    if (result.success) {
      // 자신의 메시지는 즉시 표시 (낙관적 업데이트)
      setMessages(prev => [...prev, {
        ...result.message,
        isOwn: true
      }]);
      
      setInputMessage('');
    } else {
      addSystemMessage(result.error, 'error');
    }
  };

  // 사용자 추천
  const handleLikeUser = (targetUser) => {
    if (!isConnected) return;
    
    const result = chatSocketRef.current.likeUser(targetUser.id);
    
    if (result.success) {
      addSystemMessage(`${targetUser.nickname}님을 추천했습니다! ⭐`);
    }
  };

  // 사용자 신고
  const handleReportUser = (targetUser, reason = 'inappropriate_content') => {
    if (!isConnected) return;
    
    const confirmed = window.confirm(`${targetUser.nickname}님을 신고하시겠습니까?`);
    if (!confirmed) return;
    
    const result = chatSocketRef.current.reportUser(targetUser.id, reason);
    
    if (result.success) {
      addSystemMessage('신고가 접수되었습니다.', 'report');
    }
  };

  // 사용자 목록 업데이트
  const updateUserList = () => {
    if (chatSocketRef.current) {
      chatSocketRef.current.requestRoomStats();
    }
  };

  // 스크롤을 하단으로
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // 정리 작업
  const cleanup = () => {
    if (chatSocketRef.current) {
      chatSocketRef.current.disconnect();
    }
  };

  // 닉네임 효과 가져오기
  const getNicknameWithEffect = (user) => {
    const effect = userUtils.getNicknameEffect(user.likeCount || 0);
    return `${effect.effect}${user.nickname}${user.isBlueVerified ? ' ✅' : ''}`;
  };

  // 메시지 렌더링
  const renderMessage = (message) => {
    if (message.type === 'system') {
      return (
        <div key={message.id} className={`system-message ${message.subType}`}
             style={{
               textAlign: 'center',
               padding: '0.5rem',
               margin: '0.5rem 0',
               fontSize: '0.9rem',
               color: message.subType === 'error' ? '#ff4444' : 
                      message.subType === 'like' ? '#ffd700' : '#888',
               backgroundColor: 'rgba(0,0,0,0.1)',
               borderRadius: '4px'
             }}>
          {message.content}
        </div>
      );
    }

    return (
      <div key={message.id} 
           className={`message ${message.isOwn ? 'own' : 'other'}`}
           style={{
             display: 'flex',
             flexDirection: message.isOwn ? 'row-reverse' : 'row',
             marginBottom: '1rem',
             alignItems: 'flex-start'
           }}>
        <div style={{
          maxWidth: '70%',
          padding: '0.8rem',
          borderRadius: '12px',
          backgroundColor: message.isOwn ? '#58a6ff' : '#333',
          color: 'white',
          marginLeft: message.isOwn ? '0' : '0.5rem',
          marginRight: message.isOwn ? '0.5rem' : '0'
        }}>
          {!message.isOwn && (
            <div style={{ 
              fontSize: '0.8rem', 
              marginBottom: '0.3rem',
              opacity: 0.8,
              fontWeight: 'bold'
            }}>
              {getNicknameWithEffect(message.sender)}
            </div>
          )}
          <div>{message.content}</div>
          <div style={{
            fontSize: '0.7rem',
            opacity: 0.7,
            marginTop: '0.3rem',
            textAlign: message.isOwn ? 'right' : 'left'
          }}>
            {new Date(message.timestamp).toLocaleTimeString([], {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </div>
        </div>
      </div>
    );
  };

  // 로딩 화면
  if (isLoading) {
    return (
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        height: '400px',
        color: '#888'
      }}>
        <div style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>🌍</div>
        <div>위치 정보를 가져오는 중...</div>
        <div style={{ fontSize: '0.8rem', marginTop: '0.5rem' }}>
          위치 권한을 허용해주세요
        </div>
      </div>
    );
  }

  // 에러 화면
  if (error) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '2rem',
        color: '#ff4444'
      }}>
        <div style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>❌</div>
        <div>{error}</div>
        <button 
          onClick={initializeChat}
          style={{
            marginTop: '1rem',
            padding: '0.5rem 1rem',
            backgroundColor: '#58a6ff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}>
          다시 시도
        </button>
      </div>
    );
  }

  return (
    <div className="location-chat-container" style={{
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      maxWidth: '800px',
      margin: '0 auto'
    }}>
      {/* 채팅방 헤더 */}
      <div className="chat-header" style={{
        padding: '1rem',
        backgroundColor: '#2a2a2a',
        borderRadius: '8px 8px 0 0',
        textAlign: 'center'
      }}>
        <h3 style={{ margin: 0, color: '#58a6ff' }}>
          🌍 반경 1km 채팅 
          {isConnected && <span style={{ color: '#00ff00' }}> ●</span>}
        </h3>
        <div style={{ fontSize: '0.8rem', color: '#888', marginTop: '0.5rem' }}>
          근처 사용자: {nearbyUsers.length}명 | 익명 채팅방
        </div>
      </div>

      {/* 메시지 영역 */}
      <div className="messages-container" style={{
        flex: 1,
        padding: '1rem',
        backgroundColor: '#1a1a1a',
        overflowY: 'auto',
        maxHeight: '400px'
      }}>
        {messages.length === 0 ? (
          <div style={{ 
            textAlign: 'center', 
            color: '#888',
            padding: '2rem'
          }}>
            아직 메시지가 없습니다. 첫 인사를 남겨보세요! 👋
          </div>
        ) : (
          messages.map(renderMessage)
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* 메시지 입력 */}
      <form onSubmit={handleSendMessage} style={{
        display: 'flex',
        padding: '1rem',
        backgroundColor: '#2a2a2a',
        borderRadius: '0 0 8px 8px'
      }}>
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          placeholder={isConnected ? "메시지를 입력하세요..." : "연결 중..."}
          disabled={!isConnected}
          maxLength={500}
          style={{
            flex: 1,
            padding: '0.8rem',
            border: 'none',
            borderRadius: '4px',
            backgroundColor: '#333',
            color: 'white',
            marginRight: '0.5rem'
          }}
        />
        <button
          type="submit"
          disabled={!isConnected || !inputMessage.trim()}
          style={{
            padding: '0.8rem 1.5rem',
            backgroundColor: isConnected && inputMessage.trim() ? '#58a6ff' : '#555',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: isConnected && inputMessage.trim() ? 'pointer' : 'not-allowed'
          }}>
          전송
        </button>
      </form>

      {/* 근처 사용자 목록 (옵션) */}
      {nearbyUsers.length > 0 && (
        <div style={{
          padding: '0.5rem 1rem',
          backgroundColor: '#2a2a2a',
          fontSize: '0.8rem',
          color: '#888',
          borderTop: '1px solid #333'
        }}>
          근처 사용자들: {nearbyUsers.map(u => getNicknameWithEffect(u)).join(', ')}
        </div>
      )}
    </div>
  );
};

export default LocationChatComponent;